import { NotionIconAdapter } from '../NotionIconAdapter';
import { NotionIcon } from '../../../../domain/types/NotionIcon';
import { NotionAPIIcon } from '../types';

/**
 * Testes para o NotionIconAdapter
 * Respons√°vel por adaptar √≠cones entre o formato do dom√≠nio e da API
 */
describe('NotionIconAdapter', () => {
  const adapter = new NotionIconAdapter();

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador converte corretamente um √≠cone de emoji
   */
  it('deve converter um √≠cone de emoji corretamente', () => {
    const icon: NotionIcon = {
      type: 'emoji',
      emoji: 'üëã'
    };

    const expected: NotionAPIIcon = {
      type: 'emoji',
      emoji: 'üëã'
    };

    const result = adapter.adapt(icon);
    expect(result).toEqual(expected);
  });

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador converte corretamente um √≠cone externo
   */
  it('deve converter um √≠cone externo corretamente', () => {
    const icon: NotionIcon = {
      type: 'external',
      external: {
        url: 'https://example.com/icon.png'
      }
    };

    const expected: NotionAPIIcon = {
      type: 'external',
      external: {
        url: 'https://example.com/icon.png'
      }
    };

    const result = adapter.adapt(icon);
    expect(result).toEqual(expected);
  });

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador retorna null para √≠cone nulo
   */
  it('deve retornar null para √≠cone nulo', () => {
    const result = adapter.adapt(null);
    expect(result).toBeNull();
  });

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador retorna null para √≠cone undefined
   */
  it('deve retornar null para √≠cone undefined', () => {
    const result = adapter.adapt(undefined);
    expect(result).toBeNull();
  });

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador lan√ßa erro para tipo de √≠cone inv√°lido
   */
  it('deve lan√ßar erro para tipo de √≠cone inv√°lido', () => {
    const icon = {
      type: 'invalid',
      value: 'test'
    } as any;

    expect(() => adapter.adapt(icon)).toThrow('Tipo de √≠cone n√£o suportado: invalid');
  });

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador lan√ßa erro para emoji vazio
   */
  it('deve lan√ßar erro para emoji vazio', () => {
    const icon: NotionIcon = {
      type: 'emoji'
    };

    expect(() => adapter.adapt(icon)).toThrow('Emoji n√£o pode ser vazio');
  });

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador lan√ßa erro para √≠cone externo sem URL
   */
  it('deve lan√ßar erro para √≠cone externo sem URL', () => {
    const icon: NotionIcon = {
      type: 'external'
    };

    expect(() => adapter.adapt(icon)).toThrow('URL do √≠cone externo n√£o pode ser vazia');
  });

  /**
   * ‚úì Teste aprovado
   * Verifica se o adaptador lan√ßa erro para √≠cone externo com URL vazia
   */
  it('deve lan√ßar erro para √≠cone externo com URL vazia', () => {
    const icon: NotionIcon = {
      type: 'external',
      external: {
        url: ''
      }
    };

    expect(() => adapter.adapt(icon)).toThrow('URL do √≠cone externo n√£o pode ser vazia');
  });
});
